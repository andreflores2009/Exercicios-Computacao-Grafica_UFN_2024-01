# -*- coding: utf-8 -*-
"""Rasterizacao_linhas_alg_bresenham.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1drqoAm0nkS42J_vEngjdwpa2BSYMUyVh
"""

#Algoritmo Bresenham

#Offset:
#O offset é uma variável que representa a distância entre o valor atual calculado para a coordenada y e o valor teoricamente correto na reta.
#Durante o algoritmo de Bresenham, o offset é usado para determinar quando a coordenada y deve ser incrementada.

#Limiar:
#O limiar é uma variável que define quando a coordenada y deve ser incrementada durante o desenho da reta.
#Ele é comparado com o offset para decidir quando a coordenada y deve ser ajustada.

#LimiarInc:
#O limiarInc é o incremento no valor do limiar.
#Ele é utilizado para ajustar o limiar durante o desenho da reta.

#Delta:
#O delta é um valor que representa o incremento inicial na coordenada y.
#No caso específico do código, delta é calculado como o dobro da diferença nas coordenadas y (Dy),
#pois o algoritmo trabalha em termos de valores inteiros.
#Essas variáveis são usadas para controlar a rasterização da reta de acordo com a inclinação da
#reta e garantir que os pixels corretos sejam desenhados para representar a reta na grade discreta.
#Cada uma delas desempenha um papel específico no algoritmo de Bresenham para otimizar o desenho
# de linhas em um sistema de coordenadas rasterizado.

#Biliotecas

import matplotlib.pyplot as plt



P1x = 0
P1y = 2

P2x = 8
P2y = 6

Dx = P2x - P1x
Dy = P2y - P1y

# Lista para armazenar os pontos da reta
points_x = []
points_y = []


#reta vertical
if Dx == 0:
    print("Reta vertical")
    y = P1y
    while y<=P2y:
        print(P1x,",",y)
        #adiciona os pontos na lista para gerar o gráfico
        points_x.append(P1x)
        points_y.append(y)
        y+=1

else:
    m = (Dy)/(Dx)
    offset = 0
    #reta mais deitada
    if m <= 1: #angulo <= 45º
        print("Reta mais deitada")
        delta = Dy*2 # Incremento inicial na coordenada y multiplicado por 2
        limiar = Dx # Limiar inicial
        limiarInc= Dx*2 # Incremento no limiar multiplicado por 2
        x = P1x # Inicializa a coordenada x com o ponto de origem
        y = P1y # Inicializa a coordenada y com o ponto de origem
        # Loop para percorrer a extensão da reta em x
        while x <= P2x:
            print(x,",",y)
            #adiciona os pontos na lista para gerar o gráfico
            points_x.append(x)
            points_y.append(y)
            offset+=delta  # Atualiza o offset
            if offset>=limiar: # Incrementa a coordenada y quando o offset atinge o limiar
                y+=1
                limiar+=limiarInc  # Atualiza o limiar
            x+=1

    #reta mais de pé
    elif m > 1: #angulo > 45º
        print("Reta mais de pé")
        delta = Dx*2
        limiar = Dy
        limiarInc= Dy*2
        x = P1x
        y = P1y
        while y <= P2y:
            print(x,",",y)

            #adiciona os pontos na lista para gerar o gráfico
            points_x.append(x)
            points_y.append(y)
            offset+=delta
            if offset>=limiar:
                x+=1
                limiar+=limiarInc
            y+=1

# Mostrar o gráfico
plt.plot(points_x, points_y, marker='o', linestyle='-', color='b')
plt.title('Algoritmo de Bresenham')
plt.xlabel('Eixo X')
plt.ylabel('Eixo Y')
plt.grid(True)
plt.show()